(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("grapesjs"));
	else if(typeof define === 'function' && define.amd)
		define(["grapesjs"], factory);
	else if(typeof exports === 'object')
		exports["grapesjs-plugin-forms"] = factory(require("grapesjs"));
	else
		root["grapesjs-plugin-forms"] = factory(root["grapesjs"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _grapesjs = __webpack_require__(1);

var _grapesjs2 = _interopRequireDefault(_grapesjs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _grapesjs2.default.plugins.add('gjs-plugin-forms', function (editor, opts) {
  var c = opts || {};
  var config = editor.getConfig();
  var pfx = config.stylePrefix;

  var defaults = {
    blocks: ['form', 'input', 'textarea', 'select', 'button', 'label', 'checkbox', 'radio'],
    labelTraitMethod: 'Method',
    labelTraitAction: 'Action',
    labelTraitState: 'State',
    labelTraitId: 'ID',
    labelTraitFor: 'For',
    labelInputName: 'Input',
    labelTextareaName: 'Textarea',
    labelSelectName: 'Select',
    labelCheckboxName: 'Checkbox',
    labelRadioName: 'Radio',
    labelButtonName: 'Button',
    labelTraitName: 'Name',
    labelTraitPlaceholder: 'Placeholder',
    labelTraitValue: 'Value',
    labelTraitRequired: 'Required',
    labelTraitType: 'Type',
    labelTraitOptions: 'Options',
    labelTraitChecked: 'Checked',
    labelTypeText: 'Text',
    labelTypeEmail: 'Email',
    labelTypePassword: 'Password',
    labelTypeNumber: 'Number',
    labelTypeSubmit: 'Submit',
    labelTypeReset: 'Reset',
    labelTypeButton: 'Button',
    labelNameLabel: 'Label',
    labelForm: 'Form',
    labelSelectOption: '- Select option -',
    labelOption: 'Option',
    labelStateNormal: 'Normal',
    labelStateSuccess: 'Success',
    labelStateError: 'Error'
  };

  for (var name in defaults) {
    if (!(name in c)) c[name] = defaults[name];
  }

  // Add components
  var loadComponents = __webpack_require__(2);
  loadComponents.default(editor, c);

  // Add traits
  __webpack_require__(3).default(editor, c);

  // Add blocks
  var loadBlocks = __webpack_require__(4);
  loadBlocks.default(editor, c);
});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (editor) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var c = opt;
  var domc = editor.DomComponents;
  var defaultType = domc.getType('default');
  var textType = domc.getType('text');
  var defaultModel = defaultType.model;
  var defaultView = defaultType.view;
  var textModel = textType.model;
  var textView = textType.view;

  var stateNormal = 'Normal';
  var stateSuccess = 'Success';
  var stateError = 'Error';

  var idTrait = {
    name: 'id',
    label: c.labelTraitId
  };

  var forTrait = {
    name: 'for',
    label: c.labelTraitFor
  };

  var nameTrait = {
    name: 'name',
    label: c.labelTraitName
  };

  var placeholderTrait = {
    name: 'placeholder',
    label: c.labelTraitPlaceholder
  };

  var valueTrait = {
    name: 'value',
    label: c.labelTraitValue
  };

  var requiredTrait = {
    type: 'checkbox',
    name: 'required',
    label: c.labelTraitRequired
  };

  var checkedTrait = {
    label: c.labelTraitChecked,
    type: 'checkbox',
    name: 'checked',
    changeProp: 1
  };

  var preventDefaultClick = function preventDefaultClick() {
    return defaultType.view.extend({
      events: {
        'mousedown': 'handleClick'
      },

      handleClick: function handleClick(e) {
        e.preventDefault();
      }
    });
  };

  domc.addType('form', {
    model: defaultModel.extend({
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        //droppable: ':not(form)',
        draggable: ':not(form)',
        traits: [{
          type: 'select',
          label: c.labelTraitMethod,
          name: 'method',
          options: [{ value: 'post', name: 'POST' }, { value: 'get', name: 'GET' }]
        }, {
          label: c.labelTraitAction,
          name: 'action' /*,{
                          type: 'select',
                          label: c.labelTraitState,
                          name: 'formState',
                          changeProp: 1,
                          options: [
                            {value: '', name: c.labelStateNormal},
                            {value: 'success', name: c.labelStateSuccess},
                            {value: 'error', name: c.labelStateError},
                          ]
                         }*/ }]
      }),

      init: function init() {
        this.listenTo(this, 'change:formState', this.updateFormState);
      },
      updateFormState: function updateFormState() {
        var state = this.get('formState');
        switch (state) {
          case 'success':
            this.showState('success');
            break;
          case 'error':
            this.showState('error');
            break;
          default:
            this.showState('normal');
        }
      },
      showState: function showState(state) {
        var st = state || 'normal';
        var failVis, successVis;
        if (st == 'success') {
          failVis = 'none';
          successVis = 'block';
        } else if (st == 'error') {
          failVis = 'block';
          successVis = 'none';
        } else {
          failVis = 'none';
          successVis = 'none';
        }
        var successModel = this.getStateModel('success');
        var failModel = this.getStateModel('error');
        var successStyle = successModel.getStyle();
        var failStyle = failModel.getStyle();
        successStyle.display = successVis;
        failStyle.display = failVis;
        successModel.setStyle(successStyle);
        failModel.setStyle(failStyle);
      },
      getStateModel: function getStateModel(state) {
        var st = state || 'success';
        var stateName = 'form-state-' + st;
        var stateModel;
        var comps = this.get('components');
        for (var i = 0; i < comps.length; i++) {
          var model = comps.models[i];
          if (model.get('form-state-type') == st) {
            stateModel = model;
            break;
          }
        }
        if (!stateModel) {
          var contentStr = formMsgSuccess;
          if (st == 'error') {
            contentStr = formMsgError;
          }
          stateModel = comps.add({
            'form-state-type': st,
            type: 'text',
            removable: false,
            copyable: false,
            draggable: false,
            attributes: { 'data-form-state': st },
            content: contentStr
          });
        }
        return stateModel;
      }
    }, {
      isComponent: function isComponent(el) {
        if (el.tagName == 'FORM') {
          return { type: 'form' };
        }
      }
    }),

    view: defaultView.extend({
      events: {
        submit: function submit(e) {
          e.preventDefault();
        }
      }
    })
  });

  // INPUT
  domc.addType('input', {
    model: defaultModel.extend({
      defaults: Object.assign({}, defaultModel.prototype.defaults, {
        'custom-name': c.labelInputName,
        tagName: 'input',
        draggable: 'form, form *',
        droppable: false,
        traits: [nameTrait, placeholderTrait, {
          label: c.labelTraitType,
          type: 'select',
          name: 'type',
          options: [{ value: 'text', name: c.labelTypeText }, { value: 'email', name: c.labelTypeEmail }, { value: 'password', name: c.labelTypePassword }, { value: 'number', name: c.labelTypeNumber }]
        }, requiredTrait]
      })
    }, {
      isComponent: function isComponent(el) {
        if (el.tagName == 'INPUT') {
          return { type: 'input' };
        }
      }
    }),
    view: defaultView
  });

  var inputType = domc.getType('input');
  var inputModel = inputType.model;

  // TEXTAREA
  domc.addType('textarea', {
    model: inputType.model.extend({
      defaults: Object.assign({}, inputModel.prototype.defaults, {
        'custom-name': c.labelTextareaName,
        tagName: 'textarea',
        traits: [nameTrait, placeholderTrait, requiredTrait]
      })
    }, {
      isComponent: function isComponent(el) {
        if (el.tagName == 'TEXTAREA') {
          return { type: 'textarea' };
        }
      }
    }),
    view: defaultView
  });

  // SELECT
  domc.addType('select', {
    model: defaultModel.extend({
      defaults: Object.assign({}, inputModel.prototype.defaults, {
        'custom-name': c.labelSelectName,
        tagName: 'select',
        traits: [nameTrait, {
          label: c.labelTraitOptions,
          type: 'select-options'
        }, requiredTrait]
      })
    }, {
      isComponent: function isComponent(el) {
        if (el.tagName == 'SELECT') {
          return { type: 'select' };
        }
      }
    }),
    view: preventDefaultClick()
  });

  // CHECKBOX
  domc.addType('checkbox', {
    model: defaultModel.extend({
      defaults: Object.assign({}, inputModel.prototype.defaults, {
        'custom-name': c.labelCheckboxName,
        copyable: false,
        attributes: { type: 'checkbox' },
        traits: [idTrait, nameTrait, valueTrait, requiredTrait, checkedTrait]
      }),

      init: function init() {
        this.listenTo(this, 'change:checked', this.handleChecked);
      },
      handleChecked: function handleChecked() {
        var checked = this.get('checked');
        var attrs = this.get('attributes');
        var view = this.view;

        if (checked) {
          attrs.checked = 'checked';
        } else {
          delete attrs.checked;
        }

        if (view) {
          view.el.checked = checked;
        }

        this.set('attributes', Object.assign({}, attrs));
      }
    }, {
      isComponent: function isComponent(el) {
        if (el.tagName == 'INPUT' && el.type == 'checkbox') {
          return { type: 'checkbox' };
        }
      }
    }),
    view: defaultView.extend({
      events: {
        'click': 'handleClick'
      },

      handleClick: function handleClick(e) {
        e.preventDefault();
      }
    })
  });

  var checkType = domc.getType('checkbox');

  // RADIO
  domc.addType('radio', {
    model: checkType.model.extend({
      defaults: Object.assign({}, checkType.model.prototype.defaults, {
        'custom-name': c.labelRadioName,
        attributes: { type: 'radio' }
      })
    }, {
      isComponent: function isComponent(el) {
        if (el.tagName == 'INPUT' && el.type == 'radio') {
          return { type: 'radio' };
        }
      }
    }),
    view: checkType.view
  });

  domc.addType('button', {
    model: defaultModel.extend({
      defaults: Object.assign({}, inputModel.prototype.defaults, {
        'custom-name': c.labelButtonName,
        tagName: 'button',
        traits: [{
          type: 'content',
          label: 'Text'
        }, {
          label: c.labelTraitType,
          type: 'select',
          name: 'type',
          options: [{ value: 'submit', name: c.labelTypeSubmit }, { value: 'reset', name: c.labelTypeReset }, { value: 'button', name: c.labelTypeButton }]
        }]
      })
    }, {
      isComponent: function isComponent(el) {
        if (el.tagName == 'BUTTON') {
          return { type: 'button' };
        }
      }
    }),
    view: defaultView.extend({
      events: {
        'click': 'handleClick'
      },

      init: function init() {
        this.listenTo(this.model, 'change:content', this.updateContent);
      },
      updateContent: function updateContent() {
        this.el.innerHTML = this.model.get('content');
      },
      handleClick: function handleClick(e) {
        e.preventDefault();
      }
    })
  });

  // LABEL
  domc.addType('label', {
    model: textModel.extend({
      defaults: Object.assign({}, textModel.prototype.defaults, {
        'custom-name': c.labelNameLabel,
        tagName: 'label',
        traits: [forTrait]
      })
    }, {
      isComponent: function isComponent(el) {
        if (el.tagName == 'LABEL') {
          return { type: 'label' };
        }
      }
    }),
    view: textView
  });
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (editor) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var trm = editor.TraitManager;
  var textTrat = trm.getType('text');

  trm.addType('content', {
    events: {
      'keyup': 'onChange'
    },

    onValueChange: function onValueChange() {
      var md = this.model;
      var target = md.target;
      target.set('content', md.get('value'));
    },

    getInputEl: function getInputEl() {
      if (!this.inputEl) {
        this.inputEl = textTrat.prototype.getInputEl.bind(this)();
        this.inputEl.value = this.target.get('content');
      }
      return this.inputEl;
    }
  });

  trm.addType('select-options', {
    events: {
      'keyup': 'onChange'
    },

    onValueChange: function onValueChange() {
      var optionsStr = this.model.get('value').trim();
      var options = optionsStr.split('\n');
      var optComps = [];

      for (var i = 0; i < options.length; i++) {
        var optionStr = options[i];
        var option = optionStr.split('::');
        var opt = {
          tagName: 'option',
          attributes: {}
        };
        if (option[1]) {
          opt.content = option[1];
          opt.attributes.value = option[0];
        } else {
          opt.content = option[0];
          opt.attributes.value = option[0];
        }
        optComps.push(opt);
      }

      var comps = this.target.get('components');
      comps.reset(optComps);
      this.target.view.render();
    },

    getInputEl: function getInputEl() {
      if (!this.$input) {
        var md = this.model;
        var trg = this.target;
        var name = md.get('name');
        var optionsStr = '';
        var opts = { placeholder: '' };
        var options = trg.get('components');

        for (var i = 0; i < options.length; i++) {
          var option = options.models[i];
          var optAttr = option.get('attributes');
          var optValue = optAttr.value || '';
          optionsStr += optValue + '::' + option.get('content') + '\n';
        }

        this.$input = document.createElement('textarea');
        this.$input.value = optionsStr;
      }
      return this.$input;
    }
  });
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (editor) {
  var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var c = opt;
  var bm = editor.BlockManager;

  if (c.blocks.indexOf('form') >= 0) {
    bm.add('form', {
      label: '\n      <svg class="gjs-block-svg" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n        <path class="gjs-block-svg-path" d="M22,5.5 C22,5.2 21.5,5 20.75,5 L3.25,5 C2.5,5 2,5.2 2,5.5 L2,8.5 C2,8.8 2.5,9 3.25,9 L20.75,9 C21.5,9 22,8.8 22,8.5 L22,5.5 Z M21,8 L3,8 L3,6 L21,6 L21,8 Z" fill-rule="nonzero"></path>\n        <path class="gjs-block-svg-path" d="M22,10.5 C22,10.2 21.5,10 20.75,10 L3.25,10 C2.5,10 2,10.2 2,10.5 L2,13.5 C2,13.8 2.5,14 3.25,14 L20.75,14 C21.5,14 22,13.8 22,13.5 L22,10.5 Z M21,13 L3,13 L3,11 L21,11 L21,13 Z" fill-rule="nonzero"></path>\n        <rect class="gjs-block-svg-path" x="2" y="15" width="10" height="3" rx="0.5"></rect>\n      </svg>\n      <div class="gjs-block-label">' + c.labelForm + '</div>',
      category: 'Forms',
      content: '\n        <form class="form">\n        </form>\n      '
    });
  }

  if (c.blocks.indexOf('input') >= 0) {
    bm.add('input', {
      label: '\n      <svg class="gjs-block-svg" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n        <path class="gjs-block-svg-path" d="M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z"></path>\n        <polygon class="gjs-block-svg-path" points="4 10 5 10 5 14 4 14"></polygon>\n      </svg>\n      <div class="gjs-block-label">' + c.labelInputName + '</div>',
      category: 'Forms',
      content: '<input class="input"/>'
    });
  }

  if (c.blocks.indexOf('textarea') >= 0) {
    bm.add('textarea', {
      label: '\n      <svg class="gjs-block-svg" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n        <path class="gjs-block-svg-path" d="M22,7.5 C22,6.6 21.5,6 20.75,6 L3.25,6 C2.5,6 2,6.6 2,7.5 L2,16.5 C2,17.4 2.5,18 3.25,18 L20.75,18 C21.5,18 22,17.4 22,16.5 L22,7.5 Z M21,17 L3,17 L3,7 L21,7 L21,17 Z"></path>\n        <polygon class="gjs-block-svg-path" points="4 8 5 8 5 12 4 12"></polygon>\n        <polygon class="gjs-block-svg-path" points="19 7 20 7 20 17 19 17"></polygon>\n        <polygon class="gjs-block-svg-path" points="20 8 21 8 21 9 20 9"></polygon>\n        <polygon class="gjs-block-svg-path" points="20 15 21 15 21 16 20 16"></polygon>\n      </svg>\n      <div class="gjs-block-label">' + c.labelTextareaName + '</div>',
      category: 'Forms',
      content: '<textarea class="textarea"></textarea>'
    });
  }

  if (c.blocks.indexOf('select') >= 0) {
    bm.add('select', {
      label: '\n      <svg class="gjs-block-svg" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n        <path class="gjs-block-svg-path" d="M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z" fill-rule="nonzero"></path>\n        <polygon class="gjs-block-svg-path" transform="translate(18.500000, 12.000000) scale(1, -1) translate(-18.500000, -12.000000) " points="18.5 11 20 13 17 13"></polygon>\n        <rect class="gjs-block-svg-path" x="4" y="11.5" width="11" height="1"></rect>\n      </svg>\n      <div class="gjs-block-label">' + c.labelSelectName + '</div>',
      category: 'Forms',
      content: '<select class="select">\n        ' + (c.labelSelectOption ? '<option value="">' + c.labelSelectOption + '</option>' : '') + '\n        <option value="1">' + c.labelOption + ' 1</option>\n        </select>'
    });
  }

  if (c.blocks.indexOf('button') >= 0) {
    bm.add('button', {
      label: '\n      <svg class="gjs-block-svg" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n        <path class="gjs-block-svg-path" d="M22,9 C22,8.4 21.5,8 20.75,8 L3.25,8 C2.5,8 2,8.4 2,9 L2,15 C2,15.6 2.5,16 3.25,16 L20.75,16 C21.5,16 22,15.6 22,15 L22,9 Z M21,15 L3,15 L3,9 L21,9 L21,15 Z" fill-rule="nonzero"></path>\n        <rect class="gjs-block-svg-path" x="4" y="11.5" width="16" height="1"></rect>\n      </svg>\n      <div class="gjs-block-label">' + c.labelButtonName + '</div>',
      category: 'Forms',
      content: '<button class="button">Send</button>'
    });
  }

  if (c.blocks.indexOf('label') >= 0) {
    bm.add('label', {
      label: '\n      <svg class="gjs-block-svg" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">\n        <path class="gjs-block-svg-path" d="M22,11.875 C22,11.35 21.5,11 20.75,11 L3.25,11 C2.5,11 2,11.35 2,11.875 L2,17.125 C2,17.65 2.5,18 3.25,18 L20.75,18 C21.5,18 22,17.65 22,17.125 L22,11.875 Z M21,17 L3,17 L3,12 L21,12 L21,17 Z" fill-rule="nonzero"></path>\n        <rect class="gjs-block-svg-path" x="2" y="5" width="14" height="5" rx="0.5"></rect>\n        <polygon class="gjs-block-svg-path" fill-rule="nonzero" points="4 13 5 13 5 16 4 16"></polygon>\n      </svg>\n      <div class="gjs-block-label">' + c.labelNameLabel + '</div>',
      category: 'Forms',
      content: '<label class="label">Label</label>'
    });
  }

  if (c.blocks.indexOf('checkbox') >= 0) {
    bm.add('checkbox', {
      label: c.labelCheckboxName,
      attributes: { class: 'fa fa-check-square' },
      category: 'Forms',
      content: '<input type="checkbox" class="checkbox"/>'
    });
  }

  if (c.blocks.indexOf('radio') >= 0) {
    bm.add('radio', {
      label: c.labelRadioName,
      attributes: { class: 'fa fa-dot-circle-o' },
      category: 'Forms',
      content: '<input type="radio" class="radio"/>'
    });
  }
};

/***/ })
/******/ ]);
});